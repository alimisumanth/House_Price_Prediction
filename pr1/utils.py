# -*- coding: utf-8 -*-
"""
=============================================================================
Created on: 04-08-2021 08:02 PM
Created by: Digiotai
=============================================================================
Project Name: HousePricePrediction
File Name: utils.py
Description:  This file consists of different utility methods
Version: 1.0
Revision: None
=============================================================================
"""
# importing libraries
from io import BytesIO
from django.http import HttpResponse
import sqlite3
import pandas as pd
from pandas_profiling import ProfileReport
from django.http import FileResponse
from .logger import Logger


class utils:
    def __init__(self):
        self.fileobject = open("Logs.txt", 'a+')
        self.logger = Logger()

    def featuresinfo_download(self):
        """
        Method Name: featuresinfo_download
        Description: This method is used for downloading data_description file .
        Output: return a response object which can be used to display data description file.
        On Failure: None

        Written By: Digiotai
        Version: 1.0
        Revisions: None
        """
        self.logger.log(file_object=self.fileobject, log_message='input data description downloaded')
        self.fileobject.close()
        return FileResponse(open('description.pdf', 'rb'), content_type='application/pdf')

    def filedownload(self):
        """
        Method Name:filedownload
        Description: This method is used for downloading prediction results .
        Output: return a response object which can be used to download the results.
        On Failure: None

        Written By: Digiotai
        Version: 1.0
        Revisions: None
        """
        try:
            with sqlite3.connect("db.sqlite3") as c, BytesIO() as b:
                self.logger.log(file_object=self.fileobject, log_message='fetching predicted data fromdatabase')
                df = pd.read_sql_query('SELECT * from predicted_House_pricing', c)
                # Use the StringIO object as the filehandle.
                writer = pd.ExcelWriter(b, engine='xlsxwriter')
                df.to_excel(writer, sheet_name='Sheet1')
                writer.save()
                # Set up the Http response.
                filename = 'House_pricing.xlsx'
                response = HttpResponse(
                    b.getvalue(),
                    content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
                )
                response['Content-Disposition'] = 'attachment; filename=%s' % filename
                self.logger.log(file_object=self.fileobject, log_message='Predicted data downloaded')
                self.fileobject.close()
                return response
        except Exception as e:
            return e

    def statisticalinfo(self):
        """
        Method Name:statisticalinfo
        Description: This method is used for displaying EDA results.
        Output: it saves the eda results generated by pandas_profiling
        On Failure: None


        Written By: Digiotai
        Version: 1.0
        Revisions: None
        """
        with sqlite3.connect("db.sqlite3") as c:
            table = pd.read_sql_query('SELECT * from House_pricing', c)
            prof = ProfileReport(table, title='Demo Project')
            prof.to_file(output_file='templates/eda.html')
